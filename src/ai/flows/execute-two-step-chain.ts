'use server';
/**
 * @fileOverview Executes a simple two-step prompt chain.
 * - runTwoStepChain (client-callable wrapper)
 * - TwoStepChainInput (Zod schema for input)
 * - TwoStepChainOutput (Zod schema for output)
 * - executeTwoStepChainFlow (the Genkit flow)
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const TwoStepChainInputSchema = z.object({
  step1Prompt: z.string().describe('The prompt for the first step of the chain.'),
  step2PromptTemplate: z
    .string()
    .describe(
      'The template for the second step. Must contain "{{{step1Output}}}" which will be replaced by the output of the first step.'
    ),
});
export type TwoStepChainInput = z.infer<typeof TwoStepChainInputSchema>;

export const TwoStepChainOutputSchema = z.object({
  step1Output: z.string().describe('The output generated by the first step.'),
  finalOutput: z.string().describe('The final output generated by the second step after substitution.'),
});
export type TwoStepChainOutput = z.infer<typeof TwoStepChainOutputSchema>;

const executeTwoStepChainFlow = ai.defineFlow(
  {
    name: 'executeTwoStepChainFlow',
    inputSchema: TwoStepChainInputSchema,
    outputSchema: TwoStepChainOutputSchema,
  },
  async (input) => {
    // Step 1: Execute the first prompt
    const step1Response = await ai.generate({
      prompt: input.step1Prompt,
      // Uses the default model configured in genkit.ts
    });
    const step1Output = step1Response.text;

    if (step1Output === undefined || step1Output === null) {
      // Check specifically for undefined or null, as empty string can be a valid output.
      // Depending on strictness, one might throw if step1Output is an empty string too.
      // For now, allow empty string as output.
      console.warn('Step 1 did not produce a text output or it was undefined/null.');
      // Default to empty string if no text output, to prevent breakage in replace if model returns no text.
      // Or throw new Error('Step 1 did not produce any text output.');
    }
    const safeStep1Output = step1Output || "";


    // Step 2: Substitute step1Output into step2PromptTemplate
    const populatedStep2Prompt = input.step2PromptTemplate.replace(
      /{{{step1Output}}}/g,
      safeStep1Output
    );

    // Step 2: Execute the second, populated prompt
    const step2Response = await ai.generate({
      prompt: populatedStep2Prompt,
       // Uses the default model configured in genkit.ts
    });
    const finalOutput = step2Response.text;
    
    if (finalOutput === undefined || finalOutput === null) {
      console.warn('Step 2 did not produce a text output or it was undefined/null.');
    }
    const safeFinalOutput = finalOutput || "";

    return {
      step1Output: safeStep1Output,
      finalOutput: safeFinalOutput,
    };
  }
);

export async function runTwoStepChain(input: TwoStepChainInput): Promise<TwoStepChainOutput> {
  return executeTwoStepChainFlow(input);
}
